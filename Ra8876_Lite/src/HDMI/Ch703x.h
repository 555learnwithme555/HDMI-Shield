/**
* @file 	Ch703x.h
* @author   John Leung @ TechToys (www.TechToys.com.hk)
* 
* @section  HISTORY
* Date      22nd May 2017  First release<br>
*				
* @note     Pinout summary::<br>
* 
* Board(interface)		Arduino Due (via adapter Due Zipper DTE20171024)<br>
* ==============		===========<br>
* CH7035B-SCL       	SCL1(D71)<br>
* CH7035B-SDA			SDA1(D70)<br>
* CH7035B-IRQ			D5 (not used)<br>
*    
* Board(interface)   M0/M0 PRO & Curie (direct stack)<br>
* ==============     ===========<br>
* CH7035B-SCL        SCL0<br>
* CH7035B-SDA        SDA0<br>
* CH7035B-IRQ        D5 (not used)<br>
* CH7035B-I2S/SD     D9<br>
* CH7035B-I2S/SCK    D6<br>
* CH7035B-I2S/FS     D7<br> 
* 
* Board(interface)   Teensy3.2/3.5 (via adapter Teensy Stacker DTE20171030)<br>
* ==============     ===============================<br>
* CH7035B-SCL        SCL0(D19)<br>
* CH7035B-SDA        SDA0(D18)<br>
* CH7035B-IRQ        D6 (not used)<br>
* CH7035B-I2S/SD     D22<br>
* CH7035B-I2S/SCK    D9<br>
* CH7035B-I2S/FS     D23<br>
* 
* Board(interface)   ESP8266 (via adapter Due Zipper DTE20171024)<br>
* ==============     =====================<br>
* CH7035B-SCL        SCL0(D5)<br>
* CH7035B-SDA        SDA0(D4)<br>
*/

#ifndef __CH703X_H
#define __CH703X_H

#include "Arduino.h"
#include "Wire.h"
#include "edid/edid.h"
#include "LcdParam.h"
#include "videoInOutMap.h"
#include "util/printf.h" ///by Michael McElligott


///@note Hardware pinout
/*
#ifdef TEENSYDUINO
const int CH703X_IRQ =6;	//Pin D15 for Teensy 3.2/3.5	
#else
const int CH703X_IRQ =5;	//Pin D5 for Due, M0/M0 PRO, Curie  
#endif
*/
const int CH703X_SLAVE_ADDR = 0x76;     //7'bit slave address of CH7035B

class CH703X {
    private:
    void hal_hwSetup();
    void hal_delayMs(uint32_t ms);
    void hal_writeRegister(uint8_t index, uint8_t val);
    uint8_t hal_readRegister(uint8_t index);
    void writeRegister(uint8_t page, uint8_t index, uint8_t val);
    void readRegister(uint8_t page, uint8_t index, uint8_t *val, uint8_t count);
    void setRegisterPage(uint8_t page);
    const char *yesno (int v);
    
    bool _initialised = false;
    TwoWire *_i2c;

 	uint8_t edidBuf[128];   ///EDID buffer

    public:
    CH703X(){};
    ~CH703X(){};
    
    /**
    *@brief This function resets all control registers to the default values.
    *@note  Control registers are also reset at power on by an internally
    *       generated power on reset signal.
    */
    void resetIB(void);

    /**
    *@brief This function resets the data path.
    *@note  reset the data path is like reseting the MCU of ch703x.
    */
    void resetDB(void);

    /**
     * @brief Initialize CH703x and power it up with video in & out parameters      
     * @param lcdParamInOut[][2] is a 2-D array generated by an offline tool from Chrontel
     */
    bool init(const uint8_t lcdParamInOut[][2]);
    
    //bool init(const LCDParam *videoIn, const LCDParam *videoOut, uint8_t monitorType);

    /**
    * @brief    This function allows remote procedure call to writeRegister()
    *		        & readRegister() from a serial terminal.
    * @precondition Serial.begin(115200) in setup()
    * @note     Example to use:
    *           In Arduino, open Serial Monitor, type in following
    *           command into the text box and click <send>
    *
    *           //i2c write to page 1 at register address 0x10, a value of 55
    *           i2c,w,1,0x10,55<CR>   -or-  i2c,w,0x01,0x10,0x37<CR>
    *           //i2c read from page 1 at register address 0x10 a single byte
    *           i2c,r,1,0x10<CR>
    *
    * @param    *msg is a pointer to message.    
    *
    */
	void parser(char *msg);      

  	/**
  	* @brief  GPIO and I2C setup. Should call this before using <i2c,edid> in Serial Monitor to read EDID
  	*/
  	void begin(void);
   
    /**
    * @brief Read device ID from page 4 register 0x50.     
    * @return 0x52 if i2c read is doing correctly (returning 0x5E actually)
    */
    uint8_t getChipID(void);	

    /**
    * @brief Read revision ID from page 4 register 0x51.     
    * @return 0x02 if i2c read is doing correctly (returning 0xC3 actually)
    */
    uint8_t getRevID(void);  

    /**
    * @brief  Read EDID from a HDMI sink device.
    * @return true if EDID read OK
    *         false if no EDID can be read
    */
    bool readEdid(void); 

    /**
    * @brief Print EDID information via Serial Monitor
    * @note  Copyright 2007 Red Hat, Inc.
    *        src: https://people.gnome.org/~ssp/randr/edid.h
    */
    void dump_monitor_info(void);
    
    /**
    * @brief Freeze image on DVI/VGA/HDTV
    * @param Set 1 to freeze
    *        Set 0 to release
    */
    void freezeImage(bool freeze);

    /**
    * @brief Bypass frame scaler enable / disable
    * @param Set 1 to bypass
    *        Set 0 to enable frame scaler
    * 
    */
    void frameScaler(bool bypass);

    /**
    * @brief Display a test pattern directly from CH703X HDMI encoder
    * @param sw is the switch for ON(1), OFF(0)
    * @param pattern valid values are 0(External data), 1(White), 2(Vertical ramp),
    *        3(Horizontal ramp), 4(Color bar), 7(production test pattern),
    *        11(sine wave output for DAC test), 13(ramp output for DAC test)
    */
    void testPattern(bool sw, uint8_t pattern);

    /**
    * @brief Set horizontal total pixels for input signal
    * @param hti is the horizontal total pixels
    */
    void setInputHorizontalTotal(uint16_t hti);

    /**
    * @brief Set horizontal front porch for input signal
    * @param hoi is the horizontal sync offset, also known as front porch
    */
    void setInputHsyncFrontPorch(uint16_t hoi);

    /**
    * @brief Set horizontal active pixel for input signal
    * @param hai is the horizontal active width in pixel clock
    */
    void setInputHsyncActiveWidth(uint16_t hai);

    /**
    * @brief Set horzonital pulse width for input signal
    * @param hwi is the horizontal pulse width in pixel clock
    */
    void setInputHsyncPulseWidth(uint16_t hwi);

	/**
	* @brief Set vertical total line number for input signal
	* @param vti is the vertical total line number
	*/
	void setInputVerticalTotal(uint16_t vti);

	/**
	* @brief Set vertical front porch for input signal
	* @param voi is the vertical sync offset, also known as front porch
	*/
	void setInputVsyncFrontPorch(uint16_t voi);

    /**
    * @brief Set vertical active height for input signal
    * @param vai is the vertical active height in line number
    */
    void setInputVsyncActiveHeight(uint16_t vai);

	/**
	* @brief Set vertical pulse width for input signal
	* @param hwi is the vertical pulse width in line number
	*/
	void setInputVsyncPulseWidth(uint16_t vwi);

    /**
    * @brief Set input sync polarity for hsync, vsync, and de
    * @param hsync polarity, 1 for high active, 0 for low active
    * @param vsync polarity, 1 for high active, 0 for low active
    * @param de polarity, 1 for high active, 0 for low active
    */
    void setInputSyncPolarity(bool hsync, bool vsync, bool de);

    /**
    * @brief Set input signal pixel clock frequency
    * @param pclk in kHz (eg 50MHz, GCLKFREQ[17:0]=50000
    */
    void setInputPclkFrequency(uint32_t pclk);

    /**
    * @brief Set horizontal total pixels for output signal
    * @param hto is the horizontal total pixels
    */
    void setOutputHorizontalTotal(uint16_t hto);

    /**
    * @brief Set horizontal front porch for output signal
    * @param hoo is the horizontal sync offset, also known as front porch
    */
    void setOutputHsyncFrontPorch(uint16_t hoo);

    /**
    * @brief Set horizontal active pixel for output signal
    * @param hao is the horizontal active width in pixel clock
    */
    void setOutputHsyncActiveWidth(uint16_t hao);
        
    /**
    * @brief Set horizontal pulse width for output signal
    * @param hwo is the horizontal pulse width in pixel clock
    */
    void setOutputHsyncPulseWidth(uint16_t hwo);


    /**
    * @brief Set I2S audio format and set it enable or disable
    * @param len is the length of I2S data bit, 0=16bits, 1=20bits, or 2=24bits.
    * @param fmt is the format, 00:standard, 01:right-justified, 10:left-justified
    * @param en is the enable flag, '1' to enable, '0' to disable
    * @note: Example to set an I2S standard format in 16-bit data length to enable audio
    *        setI2SAudio(0, 0, 1);
    *        Example to disable I2S audio
    *        setI2SAudio(xx, xx, 0);  //xx's are don't care values when en=0, they can be zero
    * @note: Relevant registers
    *        Page 1, R1_07h[6], I2S_PD, 1:power down, 0:power on
             Page 1, register 0x1E:
             I2SPOL,   I2S_SPDIFB, INTLC,    I2S_LENGTH, I2SFMT,
             Page 2, register 0x4F:
             R2_4Fh[7:6] with values dependent on I2S length
    */
    void setI2SAudio(uint8_t len, uint8_t fmt, bool en);

};

extern CH703X HDMI_Tx;
#endif	//__CH703X_H
